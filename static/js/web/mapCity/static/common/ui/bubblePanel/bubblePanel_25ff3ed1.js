F.module(mapCityDic+"static/common/ui/bubblePanel/bubblePanel.js", function (b, a) { var d = b(mapCityDic+"static/common/ui/jquery/jquery.js"); function g(j) { if (!j) { throw new Error("[BubblePanel Exception]: No arguments.") } else { if (!d(j.host).length) { throw new Error('[BubblePanel Exception]: Invalid argument "host".') } else { this.host = d(j.host); this.extClassNames = j.classNames || ""; this.zIndex = isNaN(j.zIndex) ? 2147483647 : parseInt(j.zIndex); this.marginFromHost = isNaN(j.marginFromHost) ? 0 : parseInt(j.marginFromHost); this.offset = d.extend({ top: 0, left: 0 }, this.marginFromHost ? null : j.offset); this.hideWhenBlur = d.type(j.hideWhenBlur) == "boolean" ? j.hideWhenBlur : true; this.animation = /^FADE|SLIDE$/.test(j.animation) ? j.animation : false; this.hideAfterDelay = isNaN(j.hideAfterDelay) ? 0 : (parseInt(j.hideAfterDelay) + (this.animation ? 200 : 0)); this.content = j.content || ""; this.onShow = d.type(j.onShow) == "function" ? j.onShow : null; this.onHide = d.type(j.onHide) == "function" ? j.onHide : null; this.isVisible = false; this.blurProtect = [this.host[0]]; if (j.blurProtect) { j.blurProtect = [].concat(j.blurProtect); var h = this; d(j.blurProtect).each(function (k, m) { var l = d(m); l.length && h.blurProtect.push(l[0]) }) } var i = j.pos && j.pos.match(/^auto|(?:(top|right|bottom|left)(?:[- |]?(top|right|bottom|left|center|auto))?)$/i); this.pos = i ? (i[1] || i[0]).toLowerCase() : "auto"; this.align = this.pos == "auto" ? "auto" : (i && i[2] && i[2] != i[1] ? i[2].toLowerCase() : "center") } } } function e(o) { var k = d.extend(this.host[0].namespaceURI == "http://www.w3.org/2000/svg" ? this.host[0].getBBox() : { width: this.host.outerWidth(), height: this.host.outerHeight() }, this.host.offset()); var n = d(document), m = d(window); d.extend(k, { viewTop: k.top - n.scrollTop(), viewRight: m.width() - (k.left - n.scrollLeft() + k.width), viewBottom: m.height() - (k.top - n.scrollTop() + k.height), viewLeft: k.left - n.scrollLeft() }); var j = { width: this.node.outerWidth(), height: this.node.outerHeight() }; var i = d([m.width() * k.viewTop, m.height() * k.viewRight, m.width() * k.viewBottom, m.height() * k.viewLeft]); if (~this.pos.indexOf("auto")) { this.pos = "auto-" + ["top", "right", "bottom", "left"][i.index(Math.max.apply(null, i))] } var l = {}, h = this.animation == "SLIDE"; switch (this.pos.replace(/auto-/, "")) { case "top": this.aniSlide = { direction: "top", len: h ? -20 : 0 }; l.top = k.top - j.height - this.marginFromHost + (o ? 0 : this.aniSlide.len); break; case "right": this.aniSlide = { direction: "left", len: h ? 20 : 0 }; l.left = k.left + k.width + this.marginFromHost + (o ? 0 : this.aniSlide.len); break; case "left": this.aniSlide = { direction: "left", len: h ? -20 : 0 }; l.left = k.left - j.width - this.marginFromHost + (o ? 0 : this.aniSlide.len); break; default: this.aniSlide = { direction: "top", len: h ? 20 : 0 }; l.top = k.top + k.height + this.marginFromHost + (o ? 0 : this.aniSlide.len) } if (~this.align.indexOf("auto")) { this.align = "auto-"; if (/top|bottom/.test(this.pos)) { this.align += ((k.width - j.width) / 2 + k.viewLeft) * ((k.width - j.width) / 2 + k.viewRight) > 0 ? "center" : (k.viewLeft > k.viewRight ? "right" : "left") } else { this.align += ((k.height - j.height) / 2 + k.viewTop) * ((k.height - j.height) / 2 + k.viewBottom) > 0 ? "center" : (k.viewTop > k.viewBottom ? "bottom" : "top") } } switch (this.align.replace(/auto-/, "")) { case "top": l.top = k.top; break; case "right": l.left = k.left + k.width - j.width; break; case "bottom": l.top = k.top + k.height - j.height; break; case "left": l.left = k.left; break; default: if (isNaN(l.left)) { l.left = k.left + (k.width - j.width) / 2 } else { l.top = k.top + (k.height - j.height) / 2 } } this.node.css({ top: l.top + this.offset.top, left: l.left + this.offset.left }) } function f(h, i) { if (h && d.type(h) == "function") { h.call(null, i) } } function c(i) { g.call(this, i); this.node = d('<div class="bubblePanel"></div>').html(this.content).addClass(this.extClassNames).css({ zIndex: this.zIndex }).appendTo(d("body")).hide(); this.blurProtect.push(this.node[0]); var h = this; if (this.hideWhenBlur) { d("body").on("click.bubblePanel", function (k) { var j = false; d.each(h.blurProtect, function (m, n) { try { if (k.target == n || d.contains(n, k.target)) { j = true; return false } } catch (l) { } }); !j && h.hide() }) } d(window).on("resize.bubblePanel", function () { h.resetPos() }).on("scroll.bubblePanel", function () { h.resetPos() }) } c.prototype = { constructor: c, setHost: function (h) { if (d(h).length) { this.blurProtect.splice(d.inArray(this.host[0], this.blurProtect), 1); this.host = d(h); this.blurProtect.push(this.host[0]); return this } }, setContent: function (h) { this.content = h; this.node.html(this.content); return this }, resetPos: function () { this.isVisible && e.call(this, true); return this }, getNode: function () { return this.node }, show: function (j) { if (!this.isVisible) { var i = this; this.isVisible = true; this.node.show(); e.call(i); if (i.animation) { var h = { opacity: 1 }; h[i.aniSlide.direction] = ("-=" + i.aniSlide.len); i.node.css("opacity", 0).animate(h, { duration: 200, queue: false, complete: function () { i.node.show(); f(j); f(i.onShow) } }) } else { f(j); f(i.onShow) } clearTimeout(i.hideDelayTimer); if (i.hideAfterDelay) { i.hideDelayTimer = setTimeout(function () { i.hide() }, i.hideAfterDelay) } return this } else { e.call(this, true) } }, hide: function (j) { if (this.isVisible) { var i = this; this.isVisible = false; if (this.animation) { var h = { opacity: 0 }; h[this.aniSlide.direction] = ("+=" + this.aniSlide.len); this.node.animate(h, { duration: 200, queue: false, complete: function () { i.node.hide(); f(j); f(i.onHide) } }) } else { this.node.hide(); f(j); f(this.onHide) } return this } } }; a = c; return a }, [mapCityDic+"static/common/ui/jquery/jquery.js"]);